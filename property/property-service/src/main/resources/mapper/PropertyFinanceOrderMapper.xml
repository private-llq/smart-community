<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jsy.community.mapper.PropertyFinanceOrderMapper">
    <!-- 批量更新结算状态为待审核,更新对象为被驳回的 -->
    <update id="updateRejectStatementStatusByIdS">
        update t_property_finance_order set statement_status = 1, update_time = now()
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </update>

    <!-- 批量更新结算状态为待审核,更新对象为未结算的 -->
    <update id="updateStatementStatusByIdS" parameterType="java.util.Map">
        update t_property_finance_order
        set statement_status = 1,
            update_time = now(),
            statement_num = case id
            <foreach collection="map.entrySet()" index="statementNum" item="orderIds">
                <foreach collection="orderIds" item="orderId">
                    when #{orderId} then #{statementNum}
                </foreach>
            </foreach>
            end
        where id in
        <foreach collection="map.entrySet()" open="(" close=")" separator="," index="statementNum" item="orderIds">
            <foreach collection="orderIds" separator="," item="orderId">
                #{orderId}
            </foreach>
        </foreach>
    </update>

    <!-- 2021.7.9 去除查询条件 where check_status=1 -->
    <select id="communityIdList" resultType="java.lang.Long">
        select distinct community_id from t_user_house
    </select>

    <!-- 获取上一个月的需要结算和被驳回的账单 -->
    <select id="queryNeedStatementOrderListByCommunityIdAndOrderTime" resultType="com.jsy.community.entity.property.PropertyFinanceOrderEntity">
        select
            *
        from t_property_finance_order
        <where>
            DATE_FORMAT( order_time, '%Y-%m' ) = DATE_FORMAT(
                DATE_SUB( NOW(), INTERVAL 1 MONTH ),
                '%Y-%m'
            )
            and order_status = 1
            and statement_status in (0, 4)
            <foreach collection="list" open=" and community_id in (" close=")" separator="," item="communityId">
                #{communityId}
            </foreach>
        </where>
    </select>

    <!-- 根据收款单号批量查询列表 -->
    <select id="queryByReceiptNums" resultType="com.jsy.community.entity.property.PropertyFinanceOrderEntity">
        select * from t_property_finance_order
        where receipt_num in
        <foreach collection="receiptNums" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="query != null">
            <if test="query.orderNum != null and query.orderNum != ''">and order_num like concat('%',#{query.orderNum},'%')</if>
        </if>
    </select>

    <select id="houseCost" resultType="com.jsy.community.vo.property.PropertyFinanceOrderVO">
        select
        tpfo.id,tpfo.order_num,tpfo.community_id,tpfo.order_time,tpfo.house_id,tpfo.property_fee,
        tpfo.penal_sum,tpfo.total_money,th.build_area,th.number,th.building,th.unit,th.floor,th.house_type
        from t_property_finance_order tpfo
        join t_user_house tuh
        on tpfo.house_id=tuh.house_id
        join t_house th
        on tuh.house_id=th.id
        where th.id=#{houseId}  and tpfo.order_status=0
    </select>
    <select id="findUser" resultType="com.jsy.community.vo.property.UserPropertyFinanceOrderVO">
        select th.number,tu.real_name
        from t_user_house tuh
        join t_house th
        on tuh.house_id=th.id
        join t_user tu
        on tuh.uid=tu.uid
        where tuh.house_id=#{houseId}
    </select>

    <!-- 根据结算单号查询相关账单列表 -->
    <select id="queryOrderByStatementNum" resultType="com.jsy.community.vo.StatementOrderVO">
        select
            tpfo.id as orderId,
            tpfo.order_num,
            tpfo.order_time,
            tpfo.total_money,
            tpfo.statement_num,
            tpfr.create_time as payTime,
            tpfr.transaction_type,
            tpfr.transaction_no,
            '物业费' as orderType
        from t_property_finance_order tpfo
        left join t_property_finance_receipt tpfr on tpfr.receipt_num = tpfo.receipt_num
        where tpfo.statement_num in
        <foreach collection="collection" open="(" close=")" separator="," item="statementNum">
            #{statementNum}
        </foreach>
    </select>

    <!-- 不固定的月份数量的数据查询(无法分组，循环union all?) -->
    <select id="test1" resultType="java.math.BigDecimal">
        <foreach collection="outList" item="item" separator="union all">
            select sum(total_money) as totalMoney from t_property_finance_order
            where receipt_num in
            <foreach collection="item" item="item2" separator="," open="(" close=")">
                #{item2}
            </foreach>
            and order_status = 1
        </foreach>
    </select>
    <!-- 缴费按月统计 -->
    <select id="statisticsReceipt" resultType="com.jsy.community.vo.property.FinanceOrderEntityVO">
        SELECT
            DATE_FORMAT( tpfr.create_time, '%Y-%m' ) as createTime,
            sum( tpfo.total_money) as totalMoney
        FROM
            t_property_finance_order tpfo
        LEFT JOIN t_property_finance_receipt tpfr ON tpfo.receipt_num = tpfr.receipt_num
        WHERE
            DATE_FORMAT( tpfr.create_time, '%Y-%m' ) &gt;= DATE_FORMAT( #{query.startDate}, '%Y-%m' )
            AND DATE_FORMAT( tpfr.create_time, '%Y-%m' ) &lt;= DATE_FORMAT( #{query.endDate}, '%Y-%m' )
        GROUP BY
            DATE_FORMAT( tpfr.create_time, '%Y-%m' )
        ORDER BY
            DATE_FORMAT( tpfr.create_time, '%Y-%m') asc
    </select>
    <!-- 缴费按月应收统计 -->
    <select id="statisticsReceivable" resultType="com.jsy.community.vo.property.FinanceOrderEntityVO">
        SELECT
            DATE_FORMAT( create_time, "%Y-%m" ) AS create_time,
            SUM( total_money ) as total_money,
            order_status,
            '物业费' AS order_type
        FROM
            t_property_finance_order
        WHERE
            DATE_FORMAT( create_time, '%Y-%m' ) &gt;= DATE_FORMAT( #{query.startDate}, '%Y-%m' )
            AND DATE_FORMAT( create_time, '%Y-%m' ) &lt;= DATE_FORMAT( #{query.endDate}, '%Y-%m' )
        GROUP BY
            DATE_FORMAT( create_time, "%Y-%m" ),
            order_status
        ORDER BY
            DATE_FORMAT( create_time, "%Y-%m" ) ASC
    </select>

    <!--    <select id="test2" resultType="">-->
<!--        select sum(total_money) as totalMoney from t_property_finance_order-->
<!--        where receipt_num in-->
<!--        <foreach collection="item" item="item2" separator="," open="(" close=")">-->
<!--            #{item2}-->
<!--        </foreach>-->
<!--        and order_status = 1-->

<!--    </select>-->

    <!-- 批量修改排序 -->
    <update id="changeSorts" parameterType="java.util.Map">
        update t_banner
        set sort = case id
        <foreach collection="map.entrySet()" index="key" item="value">
            when #{key} then #{value}
        </foreach>
        end
        where id in
        <foreach collection="map.entrySet()" index="key" separator="," open="(" close=")">
            #{key}
        </foreach>
        and status = 1
    </update>

    <!-- 缴费按月结算统计 -->
    <select id="settledStatistics" resultType="com.jsy.community.vo.property.FinanceOrderEntityVO">
        SELECT
            DATE_FORMAT( create_time, "%Y-%m" ) as create_time,
            SUM(total_money) as total_money
        FROM
            t_property_finance_order
        WHERE
            statement_status = 3
            AND DATE_FORMAT( create_time, '%Y-%m' ) &gt;= DATE_FORMAT( #{query.startDate}, '%Y-%m' )
            AND DATE_FORMAT( create_time, '%Y-%m' ) &lt;= DATE_FORMAT( #{query.endDate}, '%Y-%m' )
        GROUP BY
            DATE_FORMAT( create_time, "%Y-%m" )
        ORDER BY
            DATE_FORMAT( create_time, "%Y-%m" ) ASC
    </select>

    <!-- 缴费按月未结算统计 -->
    <select id="unsettlementStatistics" resultType="com.jsy.community.vo.property.FinanceOrderEntityVO">
        SELECT
            DATE_FORMAT( create_time, "%Y-%m" ) as create_time,
            SUM(total_money) as total_money
        FROM
            t_property_finance_order
        WHERE
            statement_status in (1, 2)
            AND DATE_FORMAT( create_time, '%Y-%m' ) &gt;= DATE_FORMAT( #{query.startDate}, '%Y-%m' )
            AND DATE_FORMAT( create_time, '%Y-%m' ) &lt;= DATE_FORMAT( #{query.endDate}, '%Y-%m' )
        GROUP BY
            DATE_FORMAT( create_time, "%Y-%m" )
        ORDER BY
            DATE_FORMAT( create_time, "%Y-%m" ) ASC
    </select>
    <insert id="saveList" parameterType="List">
        insert into t_property_finance_order
        (id,order_num,order_time,uid,target_id,community_id,property_fee,total_money,create_time,associated_type,begin_time,over_time,
        hide,coupon,deduction,build_type,type,fee_rule_id)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.id},#{item.orderNum},#{item.orderTime},#{item.uid},#{item.targetId},#{item.communityId},#{item.propertyFee},#{item.totalMoney},now(),
            #{item.associatedType},#{item.beginTime},#{item.overTime},#{item.hide},#{item.coupon},#{item.deduction},#{item.buildType},#{item.type},#{item.feeRuleId}
            )
        </foreach>
    </insert>
    <select id="getTotalMoney" resultType="java.math.BigDecimal">
        select sum(total_money) from t_property_finance_order where
        id in
        <foreach collection="orderIds" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
        and order_status = 0
    </select>
    <select id="selectByIdsList" resultType="com.jsy.community.entity.property.PropertyFinanceOrderEntity">
        select * from   t_property_finance_order where id in(
        <foreach collection="ids" item="item" separator=",">
            #{item}
        </foreach>
        )
    </select>

    <!-- 支付完成后-批量修改物业账单 -->
    <update id="updateOrderBatch">
        update t_property_finance_order
        set
        order_status = 1,
        pay_time = now(),
        update_time = now(),
        pay_type = #{payType},
        tripartite_order = #{tripartiteOrder}
        where id in
        <foreach collection="ids" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>
    <sql id="query">
        <where>
            <if test="query.associatedType!=null">
                and tp.associated_type = #{query.associatedType}
            </if>
            <if test="query.targetId!=null">
                and tp.target_id = #{query.targetId}
            </if>
            <if test="query.feeRuleName!=null and query.feeRuleName!=''">
                and tf.target_id like concat("%",#{query.feeRuleName},"%")
            </if>
            <if test="query.orderNum!=null and query.orderNum!=''">
                and tp.order_num = #{query.orderNum}
            </if>
            <if test="query.orderTime!=null">
                and tp.order_time &gt;= #{query.orderTime}
            </if>
            <if test="query.beginTime!=null">
                and tp.begin_time &gt;= #{query.beginTime}
            </if>
            <if test="query.overTime!=null">
                and tp.over_time &lt;= #{query.overTime}
            </if>
            <if test="query.hide!=null and query.hide!=0">
                and tp.hide = #{query.hide}
            </if>
        </where>
    </sql>
    <select id="findList" resultType="com.jsy.community.entity.property.PropertyFinanceOrderEntity">
        select tp.id,tf.name as feeRuleName,tp.associated_type,tp.begin_time,tp.over_time,tp.hide,
        tp.property_fee,tp.penal_sum,tp.coupon,tp.deduction,tp.total_money,tp.order_time,tp.build_type
        from  t_property_finance_order tp join t_property_fee_rule tf on tp.fee_rule_id=tf.id
        <include refid="query"></include>
        limit #{page},#{size}
    </select>
    <select id="getTotal" resultType="java.lang.Integer">
        select count(*) from   t_property_finance_order tp join t_property_fee_rule tf on tp.fee_rule_id=tf.id
        <include refid="query"></include>
    </select>
    <update id="updates">
        update t_property_finance_order set hide=2
        <where>
            <if test="orderTimeBegin!=null">
               and order_time &gt;= #{orderTimeBegin}
            </if>
            <if test="orderTimeOver!=null">
               and order_time &lt;= #{orderTimeOver}
            </if>
            <if test="beginTime!=null">
               and order_time &gt;= #{beginTime}
            </if>
            <if test="overTime!=null">
               and order_time &gt;= #{overTime}
            </if>
            <if test="type!=null">
               and type = #{type}
            </if>
        </where>
    </update>
</mapper>